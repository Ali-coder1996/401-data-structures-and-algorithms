/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class StackTest {
    @DisplayName("push to the stack")
    @Test public void testForPush(){
        Stack stack=new Stack();

        //at first the top is equal to null
        assertEquals(null,stack.top);

        //push value to the stack
        stack.push(5);
        stack.push(4);
        stack.push(3);
        assertEquals(3,stack.top.value);
    }
    @DisplayName("pop to the stack")
    @Test public void testForPop(){
        Stack stack=new Stack();

        assertNull(stack.pop());

        stack.push(5);
        stack.push(4);
        stack.push(3);
        assertEquals(3,stack.top.value);
        assertEquals(3,stack.getSize());

        //after pop the value will be change
        stack.pop();
        assertEquals(4,stack.top.value);
        assertEquals(2,stack.getSize());
        assertEquals(4,stack.pop());
    }
    @DisplayName("return the top of the stack")
    @Test public void testPeek(){
        Stack stack =new Stack();
        //before add
        assertEquals(null,stack.peek());

        //after add
        stack.push(5);
        stack.push(4);
        stack.push(3);

        assertEquals(3,stack.peek());
    }
    @DisplayName("return ture Or false if the stack is empty")
    @Test public void testIsEmpty(){
        Stack stack =new Stack();

        //check of the stack empty before push
        assertTrue(stack.isEmpty());

        //check after push to the stack
        stack.push(5);
        stack.push(54);
        stack.push(544);
        assertFalse(stack.isEmpty());
    }
    @Test public void testToString(){
        Stack stack=new Stack();
        stack.push(5);
        stack.push(4);
        assertEquals("TOP of Stack -> { 4 } -> { 5 } -> { Null }",stack.toString());
    }
}
